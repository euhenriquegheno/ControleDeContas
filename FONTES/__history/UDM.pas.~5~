unit UDM;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.FB,
  FireDAC.Phys.FBDef, FireDAC.VCLUI.Wait, FireDAC.Phys.IBBase, Data.DB,
  FireDAC.Comp.Client, EFuncoes, VCL.forms;

type
  TDm = class(TDataModule)
    Conexao: TFDConnection;
    FDPhysFBDriverLink1: TFDPhysFBDriverLink;
    procedure DataModuleCreate(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Dm: TDm;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

procedure TDm.DataModuleCreate(Sender: TObject);
Var caminhoTXT, caminhoBD : String;
begin
  //PEGA O CAMINHO EM QUE O PROGRAMA ESTA CONFIGURADO
  caminhoTXT := ExtractFilePath(Application.ExeName);
  caminhoTXT := caminhoTXT + 'database.txt';

  //COMANDO PARA VERIFICAR SE EXISTE O ARQUIVO NA PASTA
  if (FileExists (CaminhoTXT)) then
  Begin
    caminhoBD := Arquivo_Ler(caminhoTXT);
  End
  Else
  Begin
    Arquivo_Escrever(caminhoTXT, ' ');
    Application.Terminate;
  End;

  Try
    conexao.Params.Values['DataBase'] := Trim(caminhoBD);

    conexao.Open;
    conexao.Connected := True
  Except
    Application.Terminate
  End;

end;

end.
