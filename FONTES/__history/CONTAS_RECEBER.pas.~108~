unit CONTAS_RECEBER;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Data.DB, Vcl.Grids,
  Vcl.DBGrids, Vcl.ComCtrls, UDM, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, Vcl.Menus, Vcl.StdCtrls, Vcl.DBCtrls, Vcl.Mask,
  Vcl.Imaging.pngimage, EFuncoes;

type
  TFrmContasReceber = class(TForm)
    Panel1: TPanel;
    pcPrincipal: TPageControl;
    tsContasReceber: TTabSheet;
    tsIncluir: TTabSheet;
    Panel2: TPanel;
    NK: TDBGrid;
    qrContasReceber: TFDQuery;
    dsConsulta: TDataSource;
    qrContasReceberCODIGO: TIntegerField;
    qrContasReceberCLIENTE: TStringField;
    qrContasReceberVALOR: TFMTBCDField;
    qrContasReceberDATA_VENCIMENTO: TDateField;
    qrContasReceberSITUACAO: TStringField;
    Button1: TButton;
    Label6: TLabel;
    edtConsulta: TEdit;
    Label11: TLabel;
    DateTimePicker1: TDateTimePicker;
    Button3: TButton;
    Label8: TLabel;
    ComboBox1: TComboBox;
    Button2: TButton;
    Button5: TButton;
    Button8: TButton;
    PopupMenu1: TPopupMenu;
    EXCLUIR1: TMenuItem;
    INCLUIR1: TMenuItem;
    ALTERAR1: TMenuItem;
    CANCELAR1: TMenuItem;
    PAGAR1: TMenuItem;
    REABRIR1: TMenuItem;
    Label1: TLabel;
    DBEdit1: TDBEdit;
    Label3: TLabel;
    DBEdit3: TDBEdit;
    Label4: TLabel;
    DBEdit4: TDBEdit;
    Label5: TLabel;
    DBComboBox1: TDBComboBox;
    Panel4: TPanel;
    Panel5: TPanel;
    Label9: TLabel;
    Image1: TImage;
    Panel6: TPanel;
    Label10: TLabel;
    Image2: TImage;
    Panel8: TPanel;
    Image3: TImage;
    Label12: TLabel;
    Panel9: TPanel;
    Label13: TLabel;
    Image5: TImage;
    GRAVAR1: TMenuItem;
    Panel7: TPanel;
    Label7: TLabel;
    Button4: TButton;
    MaskEdit1: TMaskEdit;
    qrContasReceberCOD_CLIENTE: TIntegerField;
    qrContasReceberCLIENTE_NOME: TStringField;
    Label2: TLabel;
    DBEdit2: TDBEdit;
    Label14: TLabel;
    DBEdit5: TDBEdit;
    Image6: TImage;
    qrContasReceberBANCO_PAGAMENTO: TStringField;
    qrContasReceberFORMA_PAGAMENTO: TStringField;
    DateTimePicker2: TDateTimePicker;
    Label17: TLabel;
    Label18: TLabel;
    StaticText1: TStaticText;
    qrContasReceberCOD_CATEGORIA: TIntegerField;
    qrContasReceberCATEGORIA_NOME: TStringField;
    Label15: TLabel;
    DBEdit6: TDBEdit;
    Label16: TLabel;
    DBEdit7: TDBEdit;
    Image4: TImage;
    edtConsultaCategorias: TEdit;
    Label19: TLabel;
    Label20: TLabel;
    edtConsultaBanco: TEdit;
    Button6: TButton;
    Button7: TButton;
    Panel10: TPanel;
    lbRegistros: TLabel;
    procedure NKDrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure DBEdit4Change(Sender: TObject);
    procedure qrContasReceberAfterInsert(DataSet: TDataSet);
    procedure Button5Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button8Click(Sender: TObject);
    procedure Button6Click(Sender: TObject);
    procedure Panel6Click(Sender: TObject);
    procedure Panel5Click(Sender: TObject);
    procedure pcPrincipalChange(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure Panel8Click(Sender: TObject);
    procedure Button9Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Image6Click(Sender: TObject);
    procedure ComboBox1Change(Sender: TObject);
    procedure Panel9Click(Sender: TObject);
    procedure DBEdit4KeyPress(Sender: TObject; var Key: Char);
    procedure DBEdit5KeyPress(Sender: TObject; var Key: Char);
    procedure Image4Click(Sender: TObject);
    procedure DBEdit7KeyPress(Sender: TObject; var Key: Char);
    procedure edtConsultaChange(Sender: TObject);
    procedure edtConsultaCategoriasChange(Sender: TObject);
    procedure DateTimePicker1Change(Sender: TObject);
    procedure DateTimePicker2Change(Sender: TObject);
    procedure edtConsultaBancoChange(Sender: TObject);
    procedure Button7Click(Sender: TObject);
    procedure Panel8MouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure Panel8MouseLeave(Sender: TObject);
    procedure Panel9MouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure Panel9MouseLeave(Sender: TObject);
    procedure Button4Click(Sender: TObject);
  private
    { Private declarations }
  public
    Procedure ListarContas;
    procedure AtualizaCalculo;
  end;

var
  FrmContasReceber: TFrmContasReceber;

implementation

{$R *.dfm}

uses uConsCliente, uRecebimento, uConsCategorias2;

procedure TFrmContasReceber.AtualizaCalculo;
VAR V_SOMA : CURRENCY;
begin
  v_soma := 0;
  qrContasReceber.First;
  while not qrContasReceber.EOF do
  begin
  if not (qrContasReceber.FieldByName('VALOR').IsNull) then
    begin
      v_soma := v_soma + qrContasReceber.FieldByName('VALOR').Value;
      qrContasReceber.Next;
    end;
  end;
  MaskEdit1.Text  := FormatFloat('R$#,##0.00', v_soma);
end;

procedure TFrmContasReceber.Button1Click(Sender: TObject);
begin
  if Application.MessageBox('Deseja realmente sair?', 'ATENÇÃO', mb_iconquestion + mb_yesno) = idYes then
    FrmContasReceber.Close;
end;

procedure TFrmContasReceber.Button2Click(Sender: TObject);
begin
Try
  if Application.MessageBox('Deseja realmente excluir a conta?', 'ATENÇÃO', mb_iconquestion + mb_yesno) = idYes then
  begin
    qrContasReceber.delete;
    ListarContas;
    AtualizaCalculo;
  end;
  Except
    ShowMessage('Nenhuma conta para excluir!');
  End;
end;

procedure TFrmContasReceber.Button3Click(Sender: TObject);
begin
  ListarContas;
  AtualizaCalculo;
end;

procedure TFrmContasReceber.Button4Click(Sender: TObject);
begin
  AtualizaCalculo;
end;

procedure TFrmContasReceber.Button5Click(Sender: TObject);
begin
  qrContasReceber.Insert;
  pcPrincipal.ActivePage := tsIncluir;
  DBEdit5.SetFocus;
end;

procedure TFrmContasReceber.Button6Click(Sender: TObject);
begin
  DBEdit2.Clear;
  DBEdit5.Clear;
end;

procedure TFrmContasReceber.Button7Click(Sender: TObject);
begin
  DBEdit6.Clear;
  DBEdit7.Clear;
end;

procedure TFrmContasReceber.Button8Click(Sender: TObject);
begin
  qrContasReceber.Edit;
  pcPrincipal.ActivePage := tsIncluir;
end;

procedure TFrmContasReceber.Button9Click(Sender: TObject);
begin
  ListarContas;
  AtualizaCalculo;
end;

procedure TFrmContasReceber.ComboBox1Change(Sender: TObject);
begin
  ListarContas;
  AtualizaCalculo;
end;

procedure TFrmContasReceber.DateTimePicker1Change(Sender: TObject);
begin
  ListarContas;
  AtualizaCalculo;
end;

procedure TFrmContasReceber.DateTimePicker2Change(Sender: TObject);
begin
  ListarContas;
  AtualizaCalculo;
end;

procedure TFrmContasReceber.DBEdit4Change(Sender: TObject);
begin
  if Length(DBEdit4.Text) = 2 then
  begin
    DBEdit4.Text := DBEdit4.Text + '/';
    DBEdit4.SelStart := Length( DBEdit4.Text );
  end;
  if Length(DBEdit4.Text ) = 5 then
  begin
    DBEdit4.Text := DBEdit4.Text + '/';
    DBEdit4.SelStart := Length( DBEdit4.Text );
  end;
end;

procedure TFrmContasReceber.DBEdit4KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) then
    Self.Perform(WM_NEXTDLGCTL,0,0);
end;

procedure TFrmContasReceber.DBEdit5KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) then
  Begin
    FrmConsCliente := TFrmConsCliente.Create(Self);
    FrmConsCliente.edtConsulta.Text := dbedit5.Text;
    FrmConsCliente.ListarClientes;
    if FrmConsCliente.qrConsCliente.RecordCount > 1 then
    Begin
      FrmConsCliente.ShowModal;
      qrContasReceberCOD_CLIENTE.AsInteger := FrmConsCliente.COD_CLIENTE;
      qrContasReceberCLIENTE_NOME.AsString    := FrmConsCliente.NOME_CLIENTE;
    End
    Else
    Begin
      qrContasReceberCOD_CLIENTE.AsInteger := FrmConsCliente.qrConsClienteCODIGO.AsInteger;
      qrContasReceberCLIENTE_NOME.AsString    := FrmConsCliente.qrConsClienteNOME.AsString;
    End;

    FrmConsCliente.Free;
  End;
end;

procedure TFrmContasReceber.DBEdit7KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) then
  Begin
    FrmConsCategorias2 := TFrmConsCategorias2.Create(Self);
    FrmConsCategorias2.edtConsulta.Text := dbedit7.Text;
    FrmConsCategorias2.ListarCategorias;
    if FrmConsCategorias2.qrConsCategorias.RecordCount > 1 then
    Begin
      FrmConsCategorias2.ShowModal;
      qrContasReceberCOD_CATEGORIA.AsInteger := FrmConsCategorias2.cod_categoria;
      qrContasReceberCATEGORIA_NOME.AsString    := FrmConsCategorias2.categoria_nome;
    end
    Else
    Begin
      qrContasReceberCOD_CATEGORIA.AsInteger := FrmConsCategorias2.qrConsCategoriasCODIGO.AsInteger;
      qrContasReceberCATEGORIA_NOME.AsString    := FrmConsCategorias2.qrConsCategoriasCATEGORIA.AsString;
    End;

    FrmConsCategorias2.Free;
  End;
end;

procedure TFrmContasReceber.edtConsultaBancoChange(Sender: TObject);
begin
  ListarContas;
  AtualizaCalculo;
end;

procedure TFrmContasReceber.edtConsultaCategoriasChange(Sender: TObject);
begin
  ListarContas;
  AtualizaCalculo;
end;

procedure TFrmContasReceber.edtConsultaChange(Sender: TObject);
begin
  ListarContas;
  AtualizaCalculo;
end;

procedure TFrmContasReceber.FormActivate(Sender: TObject);
begin
  DateTimePicker1.Date := Date;
  DateTimePicker2.Date := Date;
  pcPrincipal.ActivePage := tsContasReceber;
  qrContasReceber.Active := True;
  ListarContas;
  AtualizaCalculo;
end;

procedure TFrmContasReceber.Image4Click(Sender: TObject);
begin
  FrmConsCategorias2 := TFrmConsCategorias2.Create(self);
  FrmConsCategorias2.ShowModal;

  qrContasReceberCOD_CATEGORIA.AsInteger := FrmConsCategorias2.cod_categoria;
  qrContasReceberCATEGORIA_NOME.AsString := FrmConsCategorias2.categoria_nome;

  FrmConsCategorias2.Free;
end;

procedure TFrmContasReceber.Image6Click(Sender: TObject);
begin
  FrmConsCliente := TFrmConsCliente.Create(Self);
  FrmConsCliente.ShowModal;

  qrContasReceberCOD_CLIENTE.AsInteger := FrmConsCliente.Cod_Cliente;
  qrContasReceberCLIENTE_NOME.AsString := FrmConsCliente.nome_cliente;

  FrmConsCliente.Free;
  DBEdit3.SetFocus;
end;

procedure TFrmContasReceber.ListarContas;
begin
  qrContasReceber.Close;
  qrContasReceber.SQL.Clear;
  qrContasReceber.SQL.Add('Select * from CONTAS_RECEBER');

  qrContasReceber.SQL.Add ('Where (DATA_VENCIMENTO >= '''+
  formataDataSql(DateTimePicker1.Date)+ '''AND DATA_VENCIMENTO <= ''' + formatadataSql(DateTimePicker2.Date) + ''')');

  if (edtConsulta.Text <> '') then
    qrContasReceber.SQL.Add('And (Upper(CLIENTE_NOME) like ''%' + AnsiUpperCase(edtConsulta.Text) + '%'')');

  if (edtConsultaCategorias.Text <> '') then
    qrContasReceber.SQL.Add('AND (UPPER(CATEGORIA_NOME) LIKE ''%' + AnsiUpperCase(edtConsultaCategorias.Text) + '%'')');

  if (edtConsultaBanco.Text <> '') then
    qrContasReceber.SQL.Add('AND (UPPER(BANCO_PAGAMENTO) LIKE ''%' + AnsiUpperCase(edtConsultaBanco.Text) + '%'')');

  if ComboBox1.ItemIndex = 1 then
    qrContasReceber.SQL.Add('And Situacao = ''ABERTO''')
  Else if ComboBox1.ItemIndex = 2 then
    qrContasReceber.SQL.Add('And Situacao = ''RECEBIDA''');

  qrContasReceber.SQL.Add('ORDER BY DATA_VENCIMENTO');
  qrContasReceber.open;

  lbRegistros.Caption := qrContasReceber.RecordCount.ToString + ' Registros...';
end;

procedure TFrmContasReceber.NKDrawColumnCell(Sender: TObject;
const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin
  if (gdRowSelected in State) or (gdSelected in State) then
  begin
    (Sender as TDBGrid).Canvas.Brush.Style := bsSolid;
    (Sender as TDBGrid).Canvas.Brush.Color := clskyblue;
    (Sender as TDBGrid).Canvas.Font.Style := [fsbold];
    (Sender as TDBGrid).Canvas.FillRect(Rect);
    (Sender as TDBGrid).Canvas.Font.Color := clHotLight;
    (Sender as TDBGrid).DefaultDrawColumnCell(Rect,DataCol,Column,State);
  end
  else
  begin
    (Sender as TDBGrid).Canvas.Brush.Style := bsSolid;
    (Sender as TDBGrid).Canvas.Brush.Color := clwhite;
    (Sender as TDBGrid).Canvas.Font.Style := [fsbold];
    (Sender as TDBGrid).Canvas.FillRect(Rect);
    (Sender as TDBGrid).Canvas.Font.Color := clHotLight;
    (Sender as TDBGrid).DefaultDrawColumnCell(Rect,DataCol,Column,State);
  end;

  if (Sender as TDBGrid).DataSource.DataSet.FieldByName('SITUACAO').Value = 'ABERTO'   then
  begin
    (Sender as TDBGrid).Canvas.Font.Color := clGreen;
    (Sender as TDBGrid).Canvas.Font.Style:= [fsbold];
  end
  else
  begin
    (Sender as TDBGrid).Canvas.Font.Color := clHotLight;
    (Sender as TDBGrid).Canvas.Font.Style:= [fsbold];
  end;

  (Sender as TDBGrid).Canvas.FillRect(Rect);
  (Sender as TDBGrid).DefaultDrawDataCell(Rect, (Sender as   TDBGrid).columns[datacol].field, State);
end;

procedure TFrmContasReceber.Panel5Click(Sender: TObject);
begin
  if Application.MessageBox('Deseja realmente cancelar?', 'ATENÇÃO', mb_iconquestion + mb_yesno) = idYes then
  Begin
    qrContasReceber.Cancel;
    pcPrincipal.ActivePage := tsContasReceber;
  End;
end;

procedure TFrmContasReceber.Panel6Click(Sender: TObject);
begin
  Try
    qrContasReceber.Post;
    pcPrincipal.ActivePage := tsContasReceber;
    AtualizaCalculo;
  Except
    if DBEdit1.Text = ' ' then
      ShowMessage('Insira alguma registro antes de gravar!')
    else
      ShowMessage('CODIGO DUPLICADO!');
  End;
end;

procedure TFrmContasReceber.Panel8Click(Sender: TObject);
begin
  qrContasReceber.Edit;
  if Application.MessageBox('Deseja realmente reabrir essa conta?', 'ATENÇÃO', mb_iconquestion + mb_yesno) = idYes then
    if qrContasReceber.FieldByName('SITUACAO').AsString = 'RECEBIDA' then
    Begin
      qrContasReceber.FieldByName('SITUACAO').AsString := 'ABERTO';
      FrmContasReceber.qrContasReceber.FieldByName('BANCO_PAGAMENTO').AsString := ' ';
      FrmContasReceber.qrContasReceber.FieldByName('FORMA_PAGAMENTO').AsString := ' ';
      qrContasReceber.Post
    End
    Else
      Application.MessageBox('Essa conta ja esta ABERTA!', 'ATENÇÃO', MB_ICONEXCLAMATION);
end;

procedure TFrmContasReceber.Panel8MouseLeave(Sender: TObject);
begin
  Panel8.Color := clSilver;
end;

procedure TFrmContasReceber.Panel8MouseMove(Sender: TObject; Shift: TShiftState;
  X, Y: Integer);
begin
  Panel8.Color := clSkyBlue;
end;

procedure TFrmContasReceber.Panel9Click(Sender: TObject);
begin
  FrmRecebimento := TFrmRecebimento.Create(Self);
  FrmRecebimento.ShowModal;
end;

procedure TFrmContasReceber.Panel9MouseLeave(Sender: TObject);
begin
  Panel9.Color := clSilver;
end;

procedure TFrmContasReceber.Panel9MouseMove(Sender: TObject; Shift: TShiftState;
  X, Y: Integer);
begin
  Panel9.Color := clSkyBlue;
end;

procedure TFrmContasReceber.pcPrincipalChange(Sender: TObject);
begin
  if (qrContasReceber.State = dsInsert) or
        (qrContasReceber.State = dsEdit) then
  Begin
    Application.MessageBox('Grave ou cancele antes de voltar!', 'ATENÇÃO', MB_ICONEXCLAMATION);
    pcPrincipal.ActivePage := tsIncluir;
  End
  Else
  Begin
    Application.MessageBox('Voce so pode acessar essa aba inserindo ou editando alguma conta!', 'ATENÇÃO', MB_ICONEXCLAMATION);
    pcPrincipal.ActivePage := tsContasReceber;
  End;
end;

procedure TFrmContasReceber.qrContasReceberAfterInsert(DataSet: TDataSet);
var query : TFDQuery;
    codigo : Integer;
begin
  query := TFDQuery.Create(self);//CRIA COMPONENTE NA MEMORIA
  query.Connection := Dm.Conexao;//VINCULA O COMPONENTE DE CONEXAO COM A QUERY
  query.Active := false;//DESATIVA CONEXAO DO QUERY COM O BANCO DE DADOS
  query.SQL.Add('SELECT MAX (CODIGO) AS CODIGO FROM CONTAS_RECEBER');//SQL DE CONSULTA NO BANCO
  query.Active := True;

  if (query.FieldByName('CODIGO').IsNull) then //VALIDA SE A COLUNA CODIGO É NULL
    Codigo := 1
  else
    codigo := query.FieldByName('CODIGO').AsInteger + 1;

  query.Free;//LIMPA A VARIAVEL QUERY DA MEMÓRIA

  qrContasReceberCODIGO.AsInteger := codigo;
end;

end.
