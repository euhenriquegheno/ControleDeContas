unit form.contas.pagar;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, UDM, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt,
  Data.DB, Vcl.Grids, Vcl.DBGrids, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.ComCtrls, Vcl.Mask, Vcl.DBCtrls, Data.FMTBcd, EFuncoes,
  Data.SqlExpr, Vcl.Imaging.pngimage, Vcl.Menus;

type
  TFrmContasPagar = class(TForm)
    Panel1: TPanel;
    Panel2: TPanel;
    btnExcluir: TButton;
    btnSair: TButton;
    qrContasPagar: TFDQuery;
    dsContasPagar: TDataSource;
    DBGrid1: TDBGrid;
    pcPrincipal: TPageControl;
    tsConsulta: TTabSheet;
    tsCadastro: TTabSheet;
    btnIncluir: TButton;
    StaticText1: TStaticText;
    Panel3: TPanel;
    btnAlterar: TButton;
    Panel4: TPanel;
    edtConsulta: TEdit;
    Label6: TLabel;
    Label1: TLabel;
    DBEdit1: TDBEdit;
    Label4: TLabel;
    DBEdit4: TDBEdit;
    Label5: TLabel;
    DBEdit5: TDBEdit;
    Label7: TLabel;
    DBComboBox1: TDBComboBox;
    DateTimePicker1: TDateTimePicker;
    btnBuscar: TButton;
    ComboBox1: TComboBox;
    Label8: TLabel;
    Label11: TLabel;
    PopupMenu1: TPopupMenu;
    EXCLUIR1: TMenuItem;
    INCLUIR1: TMenuItem;
    ALTERAR1: TMenuItem;
    CANCELAR1: TMenuItem;
    PAGAR1: TMenuItem;
    GRAVAR1: TMenuItem;
    ESTORNAR1: TMenuItem;
    Label14: TLabel;
    DBEdit6: TDBEdit;
    Label15: TLabel;
    Image6: TImage;
    Label3: TLabel;
    btnCalcular: TButton;
    Panel10: TPanel;
    edtValorTotal: TMaskEdit;
    Label16: TLabel;
    DateTimePicker2: TDateTimePicker;
    Label17: TLabel;
    Label18: TLabel;
    Label19: TLabel;
    DBEdit3: TDBEdit;
    Label20: TLabel;
    Image8: TImage;
    qrContasPagarCODIGO: TIntegerField;
    qrContasPagarVALOR: TFMTBCDField;
    qrContasPagarDATA_VENCIMENTO: TDateField;
    qrContasPagarSITUACAO: TStringField;
    qrContasPagarCOD_EMPRESA: TIntegerField;
    qrContasPagarEMPRESA_NOME: TStringField;
    qrContasPagarBANCO_PAGAMENTO: TStringField;
    qrContasPagarFORMA_PAGAMENTO: TStringField;
    qrContasPagarCOD_FUNCIONARIO: TIntegerField;
    qrContasPagarFUNCIONARIO_NOME: TStringField;
    qrContasPagarCAMINHO_ARQUIVOS: TStringField;
    Label21: TLabel;
    DBEdit9: TDBEdit;
    Button6: TButton;
    OpenDialog1: TOpenDialog;
    edtConsultaFuncionario: TEdit;
    Label22: TLabel;
    qrContasPagarCOD_CATEGORIA: TIntegerField;
    qrContasPagarCATEGORIA_NOME: TStringField;
    Label23: TLabel;
    DBEdit10: TDBEdit;
    Label24: TLabel;
    Image7: TImage;
    edtConsultaCategoria: TEdit;
    Label25: TLabel;
    edtConsultaBanco: TEdit;
    Label26: TLabel;
    Button9: TButton;
    Button10: TButton;
    Button11: TButton;
    qrContasPagarNUMERO_BOLETO: TStringField;
    Label27: TLabel;
    DBEdit12: TDBEdit;
    Panel11: TPanel;
    edtNumeroBoleto: TEdit;
    Label2: TLabel;
    Label28: TLabel;
    lbRegistros: TLabel;
    btnGerarRel: TButton;
    Image4: TImage;
    Image9: TImage;
    Image5: TImage;
    Image3: TImage;
    Image10: TImage;
    EdtEmpresa: TEdit;
    EdtCategoria: TEdit;
    EdtFuncionario: TEdit;
    procedure btnExcluirClick(Sender: TObject);
    procedure btnSairClick(Sender: TObject);
    procedure btnIncluirClick(Sender: TObject);
    procedure btnAlterarClick(Sender: TObject);
    procedure Button9Click(Sender: TObject);
    procedure edtConsultaKeyPress(Sender: TObject; var Key: Char);
    procedure btnBuscarClick(Sender: TObject);
    procedure ComboBox1Change(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure Button6Click(Sender: TObject);
    procedure DBEdit5Change(Sender: TObject);
    procedure DBGrid1DrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure qrContasPagarAfterInsert(DataSet: TDataSet);
    procedure pcPrincipalChange(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure Image6Click(Sender: TObject);
    procedure btnCalcularClick(Sender: TObject);
    procedure Image8Click(Sender: TObject);
    procedure Image7Click(Sender: TObject);
    procedure DBEdit2KeyPress(Sender: TObject; var Key: Char);
    procedure DateTimePicker2Change(Sender: TObject);
    procedure DateTimePicker1Change(Sender: TObject);
    procedure Button10Click(Sender: TObject);
    procedure Button11Click(Sender: TObject);
    procedure DBEdit12KeyPress(Sender: TObject; var Key: Char);
    procedure btnGerarRelClick(Sender: TObject);
    procedure Image9Click(Sender: TObject);
    procedure Image5Click(Sender: TObject);
    procedure Image10Click(Sender: TObject);
    procedure Image3Click(Sender: TObject);
    procedure EdtCategoriaKeyPress(Sender: TObject; var Key: Char);
    procedure EdtEmpresaKeyPress(Sender: TObject; var Key: Char);
    procedure EdtFuncionarioKeyPress(Sender: TObject; var Key: Char);
  private

  public
    Procedure ListarContas;
    Procedure AtualizarTotal;
  end;

var
  FrmContasPagar: TFrmContasPagar;

implementation

{$R *.dfm}

uses uConsEmpresa, uPagamento, uConsFuncionarios, uConsCategorias,
  uCadCategorias, UPrincipal, uRelContasPagar;

procedure TFrmContasPagar.Button10Click(Sender: TObject);
begin
  DBEdit3.Clear;
  EdtFuncionario.Text := '';
end;

procedure TFrmContasPagar.Button11Click(Sender: TObject);
begin
  DBEdit10.Clear;
  EdtCategoria.Text := '';
end;

procedure TFrmContasPagar.btnExcluirClick(Sender: TObject);
begin
  Try
    if Application.MessageBox('Deseja realmente excluir a conta?', 'ATENÇÃO', mb_iconquestion + mb_yesno) = idYes then
    begin
      qrContasPagar.delete;
      ListarContas;
      CalcularTotal;
    end;
  Except
    ShowMessage('Nenhuma conta para excluir!');
  End;
End;

procedure TFrmContasPagar.btnGerarRelClick(Sender: TObject);
begin
  frmRelContasPagar := TFrmRelContasPagar.Create(self);
  try
    frmRelContasPagar.ShowModal;
  finally
    freeandnil(frmRelContasPagar);
  end;
end;

procedure TFrmContasPagar.btnSairClick(Sender: TObject);
begin
  Close;
end;

procedure TFrmContasPagar.btnBuscarClick(Sender: TObject);
begin
  ListarContas;
  CalcularTotal;
end;

procedure TFrmContasPagar.btnCalcularClick(Sender: TObject);
begin
  CalcularTotal;
end;

procedure TFrmContasPagar.btnIncluirClick(Sender: TObject);
begin
  qrContasPagar.Insert;
  pcPrincipal.ActivePage := tsCadastro;
  DBEdit12.SetFocus;
  qrContasPagarSITUACAO.AsString := 'ABERTO';
end;

procedure TFrmContasPagar.Button6Click(Sender: TObject);
var Arq : String;
begin
  if OpenDialog1.Execute = True then
    Arq := OpenDialog1.FileName;
    qrContasPagar.FieldByName('CAMINHO_ARQUIVOS').asString := Arq;
end;

procedure TFrmContasPagar.btnAlterarClick(Sender: TObject);
begin
  qrContasPagar.Edit;
  pcPrincipal.ActivePage := tsCadastro;
end;

procedure TFrmContasPagar.Button9Click(Sender: TObject);
begin
  DBEdit6.Clear;
  EdtEmpresa.Text := '';
end;

procedure TFrmContasPagar.CalcularTotal;
var Qr :TFDQuery;
begin
  Qr := NewQuery();
  try
    Qr.SQL.Add('select sum(cpa.valor) as valor_total from contas_pagar cpa');
    Qr.SQL.Add('left outer join empresa emp on emp.codigo = cpa.cod_empresa');
    Qr.SQL.Add('left outer join funcionarios fun on fun.codigo = cpa.cod_funcionario');
    Qr.SQL.Add('left outer join categorias cat on cat.codigo = cpa.cod_categoria');

    Qr.SQL.Add('where (cpa.data_vencimento >= ' +
      QuotedStr(formataDataSql(DateTimePicker1.Date)) + ' AND cpa.DATA_VENCIMENTO <= ' + QuotedSte(formatadataSql(DateTimePicker2.Date)) + ')');

    if (edtConsulta.Text <> '') then
      Qr.SQL.Add('AND (Upper(emp.EMPRESA_NOME) like ''%' + AnsiUpperCase(edtConsulta.Text) + '%'')');

    if (edtConsultaFuncionario.Text <> '') then
      Qr.SQL.Add('AND (UPPER(fun.FUNCIONARIO_NOME) LIKE ''%' + AnsiUpperCase(edtConsultaFuncionario.Text) + '%'')');

    if (edtConsultaCategoria.Text <> '') then
      Qr.SQL.Add('AND (UPPER(cat.CATEGORIA_NOME) LIKE ''%' + AnsiUpperCase(edtConsultaCategoria.Text) + '%'')');

    if (edtConsultaBanco.Text <> '') then
      Qr.SQL.Add('AND (UPPER(cpa.BANCO_PAGAMENTO) LIKE ''%' + AnsiUpperCase(edtConsultaBanco.Text) + '%'')');

    if (edtNumeroBoleto.Text <> '') then
      Qr.SQL.Add('AND (UPPER(cpa.NUMERO_BOLETO) LIKE ''%' + AnsiUpperCase(edtNumeroBoleto.Text) + '%'')');

    if ComboBox1.ItemIndex = 1 then
      Qr.SQL.Add('And cpa.Situacao = ''ABERTO''')
    Else if ComboBox1.ItemIndex = 2 then
      Qr.SQL.Add('And cpa.Situacao = ''QUITADO''');

    Qr.SQL.Add('ORDER BY cpa.DATA_VENCIMENTO');
    Qr.open;

    edtValorTotal.Text  := FormatFloat('R$#,##0.00', v_soma);
  finally
    FreeAndNil(Qr);
  end;
end;

procedure TFrmContasPagar.ComboBox1Change(Sender: TObject);
begin
  ListarContas;
  CalcularTotal;
end;

procedure TFrmContasPagar.DateTimePicker1Change(Sender: TObject);
begin
  ListarContas;
  CalcularTotal;
end;

procedure TFrmContasPagar.DateTimePicker2Change(Sender: TObject);
begin
  ListarContas;
  CalcularTotal;
end;

procedure TFrmContasPagar.DBEdit12KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) then
    Self.Perform(WM_NEXTDLGCTL,0,0);
end;

procedure TFrmContasPagar.DBEdit2KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) then
    Self.Perform(WM_NEXTDLGCTL,0,0);
end;

procedure TFrmContasPagar.DBEdit5Change(Sender: TObject);
begin
  if Length(DBEdit5.Text) = 2 then begin
    DBEdit5.Text := DBEdit5.Text + '/';
    DBEdit5.SelStart := Length( DBEdit5.Text );
  end;
  if Length(DBEdit5.Text ) = 5 then begin
    DBEdit5.Text := DBEdit5.Text + '/';
    DBEdit5.SelStart := Length( DBEdit5.Text );
  end;
end;

procedure TFrmContasPagar.DBGrid1DrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin
  if (gdRowSelected in State) or (gdSelected in State) then
  begin
    (Sender as TDBGrid).Canvas.Brush.Style := bsSolid;
    (Sender as TDBGrid).Canvas.Brush.Color := clskyblue;
    (Sender as TDBGrid).Canvas.Font.Style := [fsbold];
    (Sender as TDBGrid).Canvas.FillRect(Rect);
    (Sender as TDBGrid).Canvas.Font.Color := clHotLight;
    (Sender as TDBGrid).DefaultDrawColumnCell(Rect,DataCol,Column,State);
  end
  else
  begin
    (Sender as TDBGrid).Canvas.Brush.Style := bsSolid;
    (Sender as TDBGrid).Canvas.Brush.Color := clwhite;
    (Sender as TDBGrid).Canvas.Font.Style := [fsbold];
    (Sender as TDBGrid).Canvas.FillRect(Rect);
    (Sender as TDBGrid).Canvas.Font.Color := clHotLight;
    (Sender as TDBGrid).DefaultDrawColumnCell(Rect,DataCol,Column,State);
  end;

  if (Sender as TDBGrid).DataSource.DataSet.FieldByName('SITUACAO').Value = 'ABERTO'   then
  begin
    (Sender as TDBGrid).Canvas.Font.Color := clGreen;
    (Sender as TDBGrid).Canvas.Font.Style:= [fsbold];
  end
  else
  begin
    (Sender as TDBGrid).Canvas.Font.Color := clHotLight;
    (Sender as TDBGrid).Canvas.Font.Style:= [fsbold];
  end;

  (Sender as TDBGrid).Canvas.FillRect(Rect);
  (Sender as TDBGrid).DefaultDrawDataCell(Rect, (Sender as   TDBGrid).columns[datacol].field, State);
end;

procedure TFrmContasPagar.EdtCategoriaKeyPress(Sender: TObject; var Key: Char);
var Qr : TFDQuery;
begin
  if (Key = #13) then
  begin
    Qr := NewQuery();
    try
      Qr.Open('select codigo, nome from categoria where nome = ' + QuotedStr(EdtCategoria.Text));

      if (Qr.RecordCount > 1) then
      begin
        FrmConsCategorias := TFrmConsCategorias.Create(Self);
        try
          FrmConsCategorias.edtConsulta.Text := EdtCategoria.Text;
          FrmConsCategorias.ListarCategorias;
          FrmConsCategorias.ShowModal;
        finally
          qrContasPagarCOD_CATEGORIA.AsInteger := FrmConsCategorias.cod_categoria;
          EdtCategoria.Text := FrmConsCategorias.categoria_nome;
          FreeAndNil(FrmConsCategorias);
        end;
      end
      else if (Qr.RecordCount = 1) then
      begin
        qrContasPagarCOD_CATEGORIA.AsInteger := Qr.FieldByName('codigo').AsInteger;
        EdtCategoria.Text := Qr.FieldByName('nome').AsString;
      end
      else
      begin
        qrContasPagarCOD_CATEGORIA.AsString := '';
        EdtCategoria.Text := '';
      end;

    finally
      FreeAndNil(Qr);
    end;

    Self.Perform(WM_NEXTDLGCTL,0,0);
  end;

end;

procedure TFrmContasPagar.edtConsultaKeyPress(Sender: TObject; var Key: Char);
begin
  if Key=#13 then
  Button9Click(Nil);
end;

procedure TFrmContasPagar.EdtEmpresaKeyPress(Sender: TObject; var Key: Char);
var Qr : TFDQuery;
begin
  if (Key = #13) then
  begin
    Qr := NewQuery();
    try
      Qr.Open('select codigo, nome from empresa where nome = ' + QuotedStr(EdtEmpresa.Text));

      if (Qr.RecordCount > 1) or (Qr.IsEmpty) then
      begin
        FrmConsEmpresa := TFrmConsEmpresa.Create(Self);
        try
          FrmConsEmpresa.edtConsulta.Text := EdtEmpresa.Text;
          FrmConsEmpresa.ListarEmpresas;
          FrmConsEmpresa.ShowModal;
        finally
          qrContasPagarCOD_EMPRESA.AsInteger := FrmConsEmpresa.COD_EMPRESA;
          EdtEmpresa.Text := FrmConsEmpresa.NOME_EMPRESA;
          FreeAndNil(FrmConsEmpresa);
        end;
      end
      else if (Qr.RecordCount = 1) then
      begin
        qrContasPagarCOD_EMPRESA.AsInteger := Qr.FieldByName('codigo').AsInteger;
        EdtEmpresa.Text := Qr.FieldByName('nome').AsString;
      end
      else
      begin
        qrContasPagarCOD_EMPRESA.AsString := '';
        EdtEmpresa.Text := '';
      end;
    finally
      FreeAndNil(Qr);
    end;

    Self.Perform(WM_NEXTDLGCTL,0,0);
  end;
end;

procedure TFrmContasPagar.EdtFuncionarioKeyPress(Sender: TObject;
  var Key: Char);
var Qr : TFDQuery;
begin
  if (Key = #13) then
  begin
    Qr := NewQuery();
    try
      Qr.Open('select codigo, nome from funcionarios where nome = ' + QuotedStr(EdtFuncionario.Text));

      if (Qr.RecordCount > 1) or (Qr.IsEmpty) then
      begin
        FrmConsFuncionarios := TFrmConsFuncionarios.Create(Self);
        try
          FrmConsFuncionarios.edtConsulta.Text := EdtFuncionario.Text;
          FrmConsFuncionarios.ListarFuncionarios;
          FrmConsFuncionarios.ShowModal;
        finally
          qrContasPagarCOD_FUNCIONARIO.AsInteger := FrmConsFuncionarios.COD_FUNCIONARIO;
          EdtFuncionario.Text := FrmConsFuncionarios.NOME_FUNCIONARIO;
          FreeAndNil(FrmConsFuncionarios);
        end;
      end
      else if (Qr.RecordCount = 1) then
      begin
        qrContasPagarCOD_FUNCIONARIO.AsInteger := Qr.FieldByName('codigo').AsInteger;
        EdtFuncionario.Text := Qr.FieldByName('nome').AsString;
      end
      else
      begin
        qrContasPagarCOD_FUNCIONARIO.AsString := '';
        EdtFuncionario.Text := '';
      end;
    finally
      FreeAndNil(Qr);
    end;

    Self.Perform(WM_NEXTDLGCTL,0,0);
  end;
end;

procedure TFrmContasPagar.FormActivate(Sender: TObject);
begin
  DateTimePicker1.Date := Date;
  DateTimePicker2.Date := Date;
  qrContasPagar.Active := True;
  ListarContas;
  CalcularTotal;
end;

procedure TFrmContasPagar.FormCreate(Sender: TObject);
begin
  pcPrincipal.ActivePage := tsConsulta;
end;

procedure TFrmContasPagar.FormShow(Sender: TObject);
begin
   ListarContas;
   CalcularTotal;
end;

procedure TFrmContasPagar.Image10Click(Sender: TObject);
begin
  Try
    qrContasPagar.Post;
    pcPrincipal.ActivePage := tsConsulta;
    ListarContas;
  Except
    if DBEdit5.Text = '' then
      ShowMessage('Insira alguma registro antes de gravar!')
    else
      ShowMessage('Insira alguma registro antes de gravar!');
  End;
end;

procedure TFrmContasPagar.Image3Click(Sender: TObject);
begin
  if Application.MessageBox('Deseja realmente cancelar?', 'ATENÇÃO', mb_iconquestion + mb_yesno) = idYes then
  Begin
    qrContasPagar.Cancel;
    pcPrincipal.ActivePage := tsConsulta;
  End;
end;

procedure TFrmContasPagar.Image5Click(Sender: TObject);
begin
  qrContasPagar.Edit;
  if application.MessageBox('Deseja realmente ESTORNAR essa conta?', 'ATENÇÃO', mb_iconquestion + mb_yesno) = idYes then
    if qrContasPagar.FieldByName('SITUACAO').AsString = 'QUITADO' then
    begin
      if qrContasPagarBANCO_PAGAMENTO.AsString = 'CAIXA' then
      begin
        dm.qrMovCaixa.Insert;
        dm.qrMovCaixaDESCRICAO.asString := 'ESTORNO CONTA COD: ' + IntToStr(qrContasPagarCODIGO.AsInteger) + ' - ' + qrContasPagarEMPRESA_NOME.AsString;
        dm.qrMovCaixaVALOR.AsFloat := qrContasPagarVALOR.AsFloat;
        dm.qrMovCaixaSAIDA.AsFloat := 0;
        dm.qrMovCaixaENTRADA.AsFloat := qrContasPagarVALOR.AsFloat;
        dm.qrMovCaixaTIPO.AsString := 'CAIXA';
        dataAtual := Date;
        dm.qrMovCaixaDATA.AsDateTime := dataAtual;
        dm.qrMovCaixa.Post;

        dm.qrCaixa.Edit;
        dm.qrCaixaSALDO.AsFloat := dm.qrCaixaSALDO.AsFloat + FrmContasPagar.qrContasPagarVALOR.AsFloat;
        dm.qrCaixa.Post;
      end;

      qrContasPagar.FieldByName('SITUACAO').AsString := 'ABERTO';
      frmContasPagar.qrContasPagar.FieldByName('BANCO_PAGAMENTO').AsString := '';
      frmContasPagar.qrContasPagar.FieldByName('FORMA_PAGAMENTO').AsString := '';
      qrContasPagar.Post;
    end
    else
      application.MessageBox('Essa conta ja esta ABERTA!', 'ATENÇÃO', MB_ICONEXCLAMATION);
end;

procedure TFrmContasPagar.Image6Click(Sender: TObject);
begin
  FrmConsEmpresa := TFrmConsEmpresa.Create(self);
  try
    FrmConsEmpresa.ShowModal;

    if (FrmConsEmpresa.nome_empresa <> '') then
    begin
      qrContasPagarCOD_EMPRESA.AsInteger := FrmConsEmpresa.Cod_Empresa;
      EdtEmpresa.Text := FrmConsEmpresa.nome_empresa;
    end
    else
    begin
      qrContasPagarCOD_EMPRESA.AsString := '';
      EdtEmpresa.Text := '';
    end;

    DBEdit4.SetFocus;
  finally
    freeandnil(frmConsEmpresa);
  end;
end;

procedure TFrmContasPagar.Image7Click(Sender: TObject);
begin
  FrmConsCategorias := TFrmConsCategorias.Create(self);
  try
    FrmConsCategorias.ShowModal;

    if (FrmConsCategorias.categoria_nome <> '') then
    begin
      qrContasPagarCOD_CATEGORIA.AsInteger := FrmConsCategorias.cod_categoria;
      EdtCategoria.Text := FrmConsCategorias.categoria_nome;
    end
    else
    begin
      qrContasPagarCOD_CATEGORIA.AsString := '';
      EdtCategoria.Text := '';
    end;

  finally
    freeandnil(frmConsCategorias);
  end;
end;

procedure TFrmContasPagar.Image8Click(Sender: TObject);
begin
  FrmConsFuncionarios := TFrmConsFuncionarios.Create(self);
  try
    FrmConsFuncionarios.ShowModal;

    if (FrmConsFuncionarios.nome_funcionario <> '') then
    begin
      qrContasPagarCOD_FUNCIONARIO.AsInteger := FrmConsFuncionarios.cod_funcionario;
      EdtFuncionario.Text := FrmConsFuncionarios.nome_funcionario
    end
    else
    begin
      qrContasPagarCOD_FUNCIONARIO.AsString := '';
      EdtFuncionario.Text := '';
    end;

    DBEdit4.SetFocus;
  finally
    freeandnil(frmConsFuncionarios);
  end;
end;

procedure TFrmContasPagar.Image9Click(Sender: TObject);
begin
  frmPagamento := TFrmPagamento.Create(Self);
  try
    frmPagamento.ShowModal;
  finally
    freeandnil(frmPagamento);
  end;
end;

procedure TFrmContasPagar.ListarContas;
begin
  qrContasPagar.Close;
  qrContasPagar.SQL.Clear;
  qrContasPagar.SQL.Add('select *, emp.nome as empresa_nome, fun.nome as funcionario_nome, ' +
    'cat.nome as categoria_nome  from contas_pagar cpa');
  qrContasPagar.SQL.Add('left outer join empresa emp on emp.codigo = cpa.cod_empresa');
  qrContasPagar.SQL.Add('left outer join funcionarios fun on fun.codigo = cpa.cod_funcionario');
  qrContasPagar.SQL.Add('left outer join categorias cat on cat.codigo = cpa.cod_categoria');

  qrContasPagar.SQL.Add ('where (cpa.data_vencimento >= ''' +
    QuotedStr(formataDataSql(DateTimePicker1.Date)) + ' AND cpa.DATA_VENCIMENTO <= ' + QuotedSte(formatadataSql(DateTimePicker2.Date)) + ')');

  if (edtConsulta.Text <> '') then
    qrContasPagar.SQL.Add('AND (Upper(emp.EMPRESA_NOME) like ''%' + AnsiUpperCase(edtConsulta.Text) + '%'')');

  if (edtConsultaFuncionario.Text <> '') then
    qrContasPagar.SQL.Add('AND (UPPER(fun.FUNCIONARIO_NOME) LIKE ''%' + AnsiUpperCase(edtConsultaFuncionario.Text) + '%'')');

  if (edtConsultaCategoria.Text <> '') then
    qrContasPagar.SQL.Add('AND (UPPER(cat.CATEGORIA_NOME) LIKE ''%' + AnsiUpperCase(edtConsultaCategoria.Text) + '%'')');

  if (edtConsultaBanco.Text <> '') then
    qrContasPagar.SQL.Add('AND (UPPER(cpa.BANCO_PAGAMENTO) LIKE ''%' + AnsiUpperCase(edtConsultaBanco.Text) + '%'')');

  if (edtNumeroBoleto.Text <> '') then
    qrContasPagar.SQL.Add('AND (UPPER(cpa.NUMERO_BOLETO) LIKE ''%' + AnsiUpperCase(edtNumeroBoleto.Text) + '%'')');

  if ComboBox1.ItemIndex = 1 then
    qrContasPagar.SQL.Add('And cpa.Situacao = ''ABERTO''')
  Else if ComboBox1.ItemIndex = 2 then
    qrContasPagar.SQL.Add('And cpa.Situacao = ''QUITADO''');

  qrContasPagar.SQL.Add('ORDER BY cpa.DATA_VENCIMENTO');
  qrContasPagar.open;

  lbRegistros.Caption := qrContasPagar.RecordCount.ToString + ' Registros...';

  AtualizarTotal;
end;

procedure TFrmContasPagar.pcPrincipalChange(Sender: TObject);
begin
  if (qrContasPagar.State = dsInsert) or
  (qrContasPagar.State = dsEdit) then
  Begin
    Application.MessageBox('Grave ou cancele antes de voltar!', 'ATENÇÃO', MB_ICONEXCLAMATION);
    pcPrincipal.ActivePage := tsCadastro;
  End
  Else
  Begin
    Application.MessageBox('Voce so pode acessar essa aba inserindo ou editando alguma conta!', 'ATENÇÃO', MB_ICONEXCLAMATION);
    pcPrincipal.ActivePage := tsConsulta;
  End;
end;

procedure TFrmContasPagar.qrContasPagarAfterInsert(DataSet: TDataSet);
var Qr : TFDQuery;
  Codigo : Integer;
begin
  Qr := NewQuery();
  try
    Qr.Open('select max(codigo) as codigo from contas_pagar');

    if (Qr.FieldByName('codigo').IsNull) then //VALIDA SE A COLUNA CODIGO É NULL
      Codigo := 1
    else
      Codigo := Qr.FieldByName('codigo').AsInteger + 1;

    qrContasPagarCODIGO.AsInteger := codigo;
  finally
    FreeAndNil(Qr);
  end;
end;

end.
